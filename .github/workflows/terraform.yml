name: "Terraform"

on:
  push:
    branches:
      - main
      - dev
  pull_request:

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest

    defaults :
      run :
        shell : bash
        working-directory : terraform/

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          # terraform_version: 0.13.0:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

#       - name: Terraform Format
#         id: fmt
#         run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init
      
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/dev' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false

  auth-server1:
    # job이 돌아갈 환경
    # needs: auth-server1
    runs-on: ubuntu-latest
    needs: terraform
    defaults :
      run :
        shell : bash
        working-directory : docker-compose/

    # job에서 동작할 task들의 모음
    steps:
      - uses: actions/checkout@v2
      - uses: marocchino/setup-ecs-cli@v1
        with:
          version: "v1.18.0"
      - name: ecs service
        run: |
          ecs-cli configure --cluster project4-dev --default-launch-type EC2 --config-name project4-dev --region ap-northeast-2
          ecs-cli configure profile --access-key ${{ secrets.AWS_ACCESS_KEY_ID }} --secret-key ${{ secrets.AWS_SECRET_ACCESS_KEY }} --profile-name project4-dev
          # ecs-cli up --keypair projectju --capability-iam --size 1 --instance-type t2.medium --cluster-config project4-dev --ecs-profile project4-dev --vpc vpc-0e5396ed9cc3ae48c --security-group sg-098d956e568fda953 --subnets subnet-057a319cd0a0fd0d0,subnet-0fb9e41432ec73fe9 --region ap-northeast-2
          # ecs-cli compose up --cluster-config project4-dev --ecs-profile project4-dev --cluster project4-dev --launch-type EC2 --force-update
          ecs-cli compose service up --cluster-config project4-dev --ecs-profile project4-dev --target-group-arn arn:aws:elasticloadbalancing:ap-northeast-2:060701521359:targetgroup/dev-app-dev-tg2/509b951524217429 --container-name node-app --container-port 3005 --vpc vpc-0e5396ed9cc3ae48c --launch-type EC2 --force-deployment
          # ecs-cli compose up --cluster-config project4-dev --ecs-profile project4-dev --cluster project4-dev --launch-type EC2 --force-update
          