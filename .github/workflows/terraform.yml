name: "Terraform"

on:
  push:
    branches:
      - main
      - dev
  pull_request:

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest

    defaults :
      run :
        shell : bash
        working-directory : terraform/

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          # terraform_version: 0.13.0:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

#       - name: Terraform Format
#         id: fmt
#         run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init
      
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/dev' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false

  Deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: terraform
    environment: dev

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"


  auth-server:
    # jobÏù¥ ÎèåÏïÑÍ∞à ÌôòÍ≤Ω
    # needs: auth-server1
    runs-on: ubuntu-latest
    needs: [terraform, Deploy]
    defaults :
      run :
        shell : bash
        working-directory : auth-server/

    # jobÏóêÏÑú ÎèôÏûëÌï† taskÎì§Ïùò Î™®Ïùå
    steps:
      - uses: actions/checkout@v2
      - uses: marocchino/setup-ecs-cli@v1
        with:
          version: "v1.18.0"
      - name: ecs service
        run: |
          ecs-cli configure --cluster project4-dev --default-launch-type EC2 --config-name project4-dev --region ap-northeast-2
          ecs-cli configure profile --access-key ${{ secrets.AWS_ACCESS_KEY_ID }} --secret-key ${{ secrets.AWS_SECRET_ACCESS_KEY }} --profile-name project4-dev
          # ecs-cli up --keypair projectju --capability-iam --size 1 --instance-type t2.medium --cluster-config project4-dev --ecs-profile project4-dev --vpc ${{ secrets.AWS_VPC }} --security-group ${{ secrets.AWS_SECURITY_GROUP }} --subnets ${{ secrets.AWS_SUBNETS_1 }},${{ secrets.AWS_SUBNETS_2 }} --region ap-northeast-2
          ecs-cli compose service up --cluster-config project4-dev --ecs-profile project4-dev --target-group-arn ${{ secrets.AWS_TARGET_GROUP_ARN }} --container-name node-app --container-port 3005 --vpc ${{ secrets.AWS_VPC }} --launch-type EC2 --force-deployment